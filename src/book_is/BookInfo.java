/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package book_is;

import java.awt.Desktop;
import java.io.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import java.util.Vector;

/**
 *
 * @author DELL
 */
public class BookInfo extends javax.swing.JFrame {

    /**
     * Creates new form BookInfo
     */
    public BookInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeGrp = new javax.swing.ButtonGroup();
        headingPnl1 = new javax.swing.JPanel();
        headingLbl1 = new javax.swing.JLabel();
        mainPnl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        bookIdLbl = new javax.swing.JLabel();
        bookNameLbl = new javax.swing.JLabel();
        authorLbl = new javax.swing.JLabel();
        bookIdFld = new javax.swing.JTextField();
        genreLbl = new javax.swing.JLabel();
        genreComboBox = new javax.swing.JComboBox<>();
        bookNameFld = new javax.swing.JTextField();
        authorFld = new javax.swing.JTextField();
        coverTypeLbl = new javax.swing.JLabel();
        hardCvrRdBtn = new javax.swing.JRadioButton();
        priceLbl = new javax.swing.JLabel();
        priceFld = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        searchBookBtn = new javax.swing.JButton();
        bookByPriceLbl = new javax.swing.JLabel();
        bookByGenreLbl = new javax.swing.JLabel();
        bookByGenreComboBox = new javax.swing.JComboBox<>();
        booksInGenreBtn = new javax.swing.JButton();
        bookByPriceFld = new javax.swing.JTextField();
        updateBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        searchBooksByLbl = new javax.swing.JLabel();
        softCvrRdBtn = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        headingPnl1.setBackground(new java.awt.Color(255, 224, 240));

        headingLbl1.setFont(new java.awt.Font("Lucida Calligraphy", 0, 24)); // NOI18N
        headingLbl1.setForeground(new java.awt.Color(255, 20, 138));
        headingLbl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headingLbl1.setText("Book Store Information System");

        javax.swing.GroupLayout headingPnl1Layout = new javax.swing.GroupLayout(headingPnl1);
        headingPnl1.setLayout(headingPnl1Layout);
        headingPnl1Layout.setHorizontalGroup(
            headingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headingLbl1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
        );
        headingPnl1Layout.setVerticalGroup(
            headingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headingLbl1, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
        );

        mainPnl.setBackground(new java.awt.Color(255, 166, 201));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        bookTable.setBackground(new java.awt.Color(255, 225, 249));
        bookTable.setFont(new java.awt.Font("Lucida Bright", 0, 12)); // NOI18N
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"101", "Harry Potter", "JK Rowling", "Fantasy", "Soft Cover", "800"},
                {"102", "It Ends with Us", "Colleen Hoover ", "Fiction", "Soft Cover", "1000"},
                {"103", "Shatter Me", "Tahereh Mafi", "Dystopian", "Soft Cover", "750"},
                {"104", "The Invisible Life of Addie Larue", "V.E. Schwab", "Fantasy", "Hard Cover", "2000"},
                {"105", "All the Bright Places", "Jennifer Niven", "Young Adult", "Hard Cover", "1500"},
                {"106", "Pride and Prejudice", "Jane Austen", "Classic", "Soft Cover", "800"},
                {"107", "Heidi", "Johanna Spyri", "Children's", "Soft Cover", "350"},
                {"108", "Treasure Island", "Robert Louis Stevenson", "Adventure", "Hard Cover", "2100"},
                {"109", "A Man Called Ove", "Fredrik Backman", "Fiction", "HardCover", "1100"},
                {"110", "The Selection", "Kiera Cass", "Dystopian", "Soft Cover", "950"},
                {"111", "The Girl Who Lived", "Christopher Greyson", "Mystery", "Hard Cover", "1250"},
                {"112", "Todat Tonight Tomorrow", "Rachel Lynn Solmon", "Young Adult", "Soft Cover", "550"},
                {"113", "Eleanor & Park", "Rainbow Rowell", "Young Adult", "Soft Cover", "650"}
            },
            new String [] {
                "Book ID", "Book Name", "Author", "Genre", "Cover Type", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookTable.setGridColor(new java.awt.Color(255, 0, 153));
        bookTable.setSelectionBackground(new java.awt.Color(192, 192, 192));
        bookTable.setShowGrid(true);
        bookTable.getTableHeader().setReorderingAllowed(false);
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);
        if (bookTable.getColumnModel().getColumnCount() > 0) {
            bookTable.getColumnModel().getColumn(0).setResizable(false);
            bookTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            bookTable.getColumnModel().getColumn(1).setResizable(false);
            bookTable.getColumnModel().getColumn(1).setPreferredWidth(215);
            bookTable.getColumnModel().getColumn(2).setResizable(false);
            bookTable.getColumnModel().getColumn(2).setPreferredWidth(120);
            bookTable.getColumnModel().getColumn(3).setResizable(false);
            bookTable.getColumnModel().getColumn(4).setResizable(false);
            bookTable.getColumnModel().getColumn(5).setResizable(false);
            bookTable.getColumnModel().getColumn(5).setPreferredWidth(45);
        }

        bookIdLbl.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        bookIdLbl.setText("Book ID:");

        bookNameLbl.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        bookNameLbl.setText("Book Name:");

        authorLbl.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        authorLbl.setText("Author:");

        bookIdFld.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        bookIdFld.setCaretColor(new java.awt.Color(255, 0, 204));
        bookIdFld.setSelectedTextColor(new java.awt.Color(255, 20, 138));
        bookIdFld.setSelectionColor(new java.awt.Color(255, 225, 249));
        bookIdFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bookIdFldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookIdFldKeyReleased(evt);
            }
        });

        genreLbl.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        genreLbl.setText("Genre:");

        genreComboBox.setBackground(new java.awt.Color(255, 225, 249));
        genreComboBox.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        genreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a book genre", "Fantasy", "Adventure", "Dystopian", "Young Adult", "Mystery", "Fiction", "Classic", "Poetry", "Children's" }));

        bookNameFld.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        bookNameFld.setCaretColor(new java.awt.Color(255, 0, 204));
        bookNameFld.setSelectedTextColor(new java.awt.Color(255, 20, 138));
        bookNameFld.setSelectionColor(new java.awt.Color(255, 225, 249));
        bookNameFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bookNameFldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookNameFldKeyReleased(evt);
            }
        });

        authorFld.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        authorFld.setCaretColor(new java.awt.Color(255, 0, 204));
        authorFld.setSelectedTextColor(new java.awt.Color(255, 20, 138));
        authorFld.setSelectionColor(new java.awt.Color(255, 225, 249));
        authorFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                authorFldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                authorFldKeyReleased(evt);
            }
        });

        coverTypeLbl.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        coverTypeLbl.setText("Cover Type:");

        typeGrp.add(hardCvrRdBtn);
        hardCvrRdBtn.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        hardCvrRdBtn.setText("Hard Cover");
        hardCvrRdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardCvrRdBtnActionPerformed(evt);
            }
        });

        priceLbl.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        priceLbl.setText("Price:");

        priceFld.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        priceFld.setCaretColor(new java.awt.Color(255, 0, 204));
        priceFld.setSelectedTextColor(new java.awt.Color(255, 20, 138));
        priceFld.setSelectionColor(new java.awt.Color(255, 225, 249));
        priceFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                priceFldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceFldKeyReleased(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(255, 225, 249));
        addBtn.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 20, 138));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        searchBookBtn.setBackground(new java.awt.Color(255, 225, 249));
        searchBookBtn.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        searchBookBtn.setForeground(new java.awt.Color(255, 20, 138));
        searchBookBtn.setText("Search Book");
        searchBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBookBtnActionPerformed(evt);
            }
        });

        bookByPriceLbl.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        bookByPriceLbl.setText("Book by Price:");

        bookByGenreLbl.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        bookByGenreLbl.setText("Book by Genre:");

        bookByGenreComboBox.setBackground(new java.awt.Color(255, 225, 249));
        bookByGenreComboBox.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        bookByGenreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a book genre", "Fantasy", "Adventure", "Dystopian", "Young Adult", "Mystery", "Fiction", "Classic", "Poetry", "Children's" }));

        booksInGenreBtn.setBackground(new java.awt.Color(255, 225, 249));
        booksInGenreBtn.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        booksInGenreBtn.setForeground(new java.awt.Color(255, 20, 138));
        booksInGenreBtn.setText("Books available in the Genre");
        booksInGenreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                booksInGenreBtnActionPerformed(evt);
            }
        });

        bookByPriceFld.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        bookByPriceFld.setCaretColor(new java.awt.Color(255, 0, 204));
        bookByPriceFld.setSelectedTextColor(new java.awt.Color(255, 20, 138));
        bookByPriceFld.setSelectionColor(new java.awt.Color(255, 225, 249));
        bookByPriceFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bookByPriceFldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookByPriceFldKeyReleased(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(255, 225, 249));
        updateBtn.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(255, 20, 138));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(255, 225, 249));
        clearBtn.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        clearBtn.setForeground(new java.awt.Color(255, 20, 138));
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 225, 249));
        deleteBtn.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 20, 138));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        searchBooksByLbl.setFont(new java.awt.Font("Lucida Calligraphy", 0, 24)); // NOI18N
        searchBooksByLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchBooksByLbl.setText("Search Books By");

        typeGrp.add(softCvrRdBtn);
        softCvrRdBtn.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        softCvrRdBtn.setText("Soft Cover");
        softCvrRdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softCvrRdBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPnlLayout = new javax.swing.GroupLayout(mainPnl);
        mainPnl.setLayout(mainPnlLayout);
        mainPnlLayout.setHorizontalGroup(
            mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(mainPnlLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addComponent(bookIdLbl)
                                .addGap(43, 43, 43)
                                .addComponent(bookIdFld, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bookNameLbl)
                                    .addComponent(authorLbl))
                                .addGap(18, 18, 18)
                                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(authorFld, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bookNameFld, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(priceLbl)
                                    .addComponent(coverTypeLbl)
                                    .addComponent(genreLbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(priceFld, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(mainPnlLayout.createSequentialGroup()
                                        .addComponent(hardCvrRdBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(softCvrRdBtn))))
                            .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(searchBooksByLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookByPriceLbl)
                            .addComponent(bookByGenreLbl))
                        .addGap(18, 18, 18)
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bookByPriceFld)
                            .addComponent(bookByGenreComboBox, 0, 207, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchBookBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(booksInGenreBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48))))
        );
        mainPnlLayout.setVerticalGroup(
            mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPnlLayout.createSequentialGroup()
                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookIdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bookIdFld, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(genreLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookNameFld, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(coverTypeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hardCvrRdBtn)
                            .addComponent(softCvrRdBtn))
                        .addGap(18, 18, 18)
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(authorLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(authorFld, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceFld, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE))
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)))
                .addComponent(searchBooksByLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookByPriceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookByPriceFld, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookByGenreLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookByGenreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(booksInGenreBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenu.setText("Open");
        openMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openMenuMouseClicked(evt);
            }
        });
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpMenuMouseClicked(evt);
            }
        });
        helpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headingPnl1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headingPnl1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 599, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 101, Short.MAX_VALUE)
                    .addComponent(mainPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        // TODO add your handling code here:
        System.exit(0); // to exit the system
    }//GEN-LAST:event_exitMenuActionPerformed

    private void openMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openMenuMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_openMenuMouseClicked

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:        
    }//GEN-LAST:event_fileMenuActionPerformed

    private void helpMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpMenuMouseClicked
        // TODO add your handling code here:
        if(Desktop.isDesktopSupported()){
            try{
                Desktop.getDesktop().open(new File("src/file/user_guide.pdf")); //opens the pdf file
            }catch(Exception e){
                e.printStackTrace();
            }
        }else{
            System.out.println("not supported");
        }
    }//GEN-LAST:event_helpMenuMouseClicked

    private void helpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpMenuActionPerformed

    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        // gets the data of the selected row and sets them in their respective fields
        int selectedRow = bookTable.getSelectedRow(); //gets the selected row from the table
        DefaultTableModel model = (DefaultTableModel)bookTable.getModel();
        
        bookIdFld.setText(model.getValueAt(selectedRow, 0).toString());
        bookNameFld.setText(model.getValueAt(selectedRow, 1).toString());
        authorFld.setText(model.getValueAt(selectedRow, 2).toString());
        priceFld.setText(model.getValueAt(selectedRow, 5).toString());

        if(model.getValueAt(selectedRow, 4).toString().equals("Hard Cover")){
            hardCvrRdBtn.setSelected(true);
        }else{
            softCvrRdBtn.setSelected(true);
        }

        String genre = model.getValueAt(selectedRow, 3).toString();

        for(int i =0; i<genreComboBox.getItemCount(); i++){
            if(genreComboBox.getItemAt(i).equals(genre)){
                genreComboBox.setSelectedIndex(i);
            }
        }
    }//GEN-LAST:event_bookTableMouseClicked

    private void bookIdFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookIdFldKeyPressed
        //checks whether the character being pressed is number or not and if it is any character except for number then text field is set to be not edited
        char character = evt.getKeyChar();
        int keycode = evt.getKeyCode();
        if(!(Character.isDigit(character))){
            if(keycode == 8){
                bookIdFld.setEditable(true);
            }
            else{
                bookIdFld.setEditable(false);
                JOptionPane.showMessageDialog(rootPane, "Input other than number detected. Please enter a number" ,"Invalid Input", JOptionPane.ERROR_MESSAGE );
            }
        }
    }//GEN-LAST:event_bookIdFldKeyPressed

    private void bookIdFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookIdFldKeyReleased
        // TODO add your handling code here:
        bookIdFld.setEditable(true);
    }//GEN-LAST:event_bookIdFldKeyReleased

    private void bookNameFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookNameFldKeyPressed
        // checks whether number is being entered in book name. if number is being entered then the text field is set not to be edited
        char character = evt.getKeyChar();
        int keycode = evt.getKeyCode();
        if(Character.isDigit(character)){
            if(keycode == 8){
                bookNameFld.setEditable(true);
            }
            else{
                bookNameFld.setEditable(false);
                JOptionPane.showMessageDialog(rootPane, "Input other than Charatcters detected. Please enter charatcters" ,"Invalid Input", JOptionPane.ERROR_MESSAGE );
            }
        }
    }//GEN-LAST:event_bookNameFldKeyPressed

    private void bookNameFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookNameFldKeyReleased
        // TODO add your handling code here:
        bookNameFld.setEditable(true);
    }//GEN-LAST:event_bookNameFldKeyReleased

    private void authorFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorFldKeyPressed
        // checks whether only alphabets are being entered or not. If anything except for alphabet is pressed, the text field is set not to be edited
        char character = evt.getKeyChar();
        if(Character.isISOControl(character) || Character.isLetter(character) ||Character.isWhitespace(character)){
            authorFld.setEditable(true);
        }else{
            authorFld.setEditable(false);
        }
    }//GEN-LAST:event_authorFldKeyPressed

    private void authorFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorFldKeyReleased
        // TODO add your handling code here:
        authorFld.setEditable(true);
    }//GEN-LAST:event_authorFldKeyReleased

    private void hardCvrRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardCvrRdBtnActionPerformed
        // setting action command for radio button hard cover
        hardCvrRdBtn.setActionCommand("Hard Cover");
    }//GEN-LAST:event_hardCvrRdBtnActionPerformed

    private void priceFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceFldKeyPressed
        // checks whether the key being pressed is number or not. If anything except number is pressed text field is set not to be edited. It also accepts decimal but only once.
        char character = evt.getKeyChar();
        int keycode = evt.getKeyCode();
        if(!(Character.isDigit(character))){
            if(keycode== 46 || keycode == 110){
                if(priceFld.getText().contains(".")){
                    priceFld.setEditable(false);
                    JOptionPane.showMessageDialog(rootPane, "Decimal already exists" ,"Invalid Input", JOptionPane.ERROR_MESSAGE );
                }
                else{
                    priceFld.setEditable(true);
                }
            }else if(keycode == 8){
                priceFld.setEditable(true);
            }
            else{
                priceFld.setEditable(false);
                JOptionPane.showMessageDialog(rootPane, "Input other than number detected. Please enter a number" ,"Invalid Input", JOptionPane.ERROR_MESSAGE );
            }
        }
    }//GEN-LAST:event_priceFldKeyPressed

    private void priceFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceFldKeyReleased
        // TODO add your handling code here:
        priceFld.setEditable(true);
    }//GEN-LAST:event_priceFldKeyReleased

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //takes the input from the text fields and adds the data to the respective column
        //stroring data from the text fields in string variable
        String bookId = bookIdFld.getText();
        String bookName = bookNameFld.getText();
        String author = authorFld.getText();
        String genre = (String) genreComboBox.getSelectedItem();
        String price = priceFld.getText();
        
        //initializing variables
        int rowCount = bookTable.getRowCount();
        int nextRow = 0;
        boolean emptyFlag = false;
        
        //checking if any field is empty or not
        if(bookIdFld.getText().isEmpty() || bookNameFld.getText().isEmpty() || authorFld.getText().isEmpty() || genreComboBox.getSelectedIndex() == 0 || typeGrp.getSelection().getActionCommand().isEmpty() || priceFld.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Please fill all the fields", "Invalid Input" , JOptionPane.ERROR_MESSAGE);
        }else{
            String type = typeGrp.getSelection().getActionCommand();
            do{
                //storing data in string varaibles to check for duplication
                String checkId = (String) bookTable.getValueAt(nextRow, 0);
                String checkName = (String) bookTable.getValueAt(nextRow, 1);
                
                if(checkId == null || checkId.length() == 0){
                    emptyFlag = true;
                }else{
                    if(checkId.equals(bookId) || checkName.equals(bookName)){ // checking for duplicate book Id or duplicate book name
                        JOptionPane.showMessageDialog(rootPane, "Duplicate Book Id or Book Name cannot be entered", "Invalid Input" , JOptionPane.ERROR_MESSAGE);
                        break;
                    }else{
                        nextRow++ ;
                    }
                }
            }while(nextRow < rowCount && !emptyFlag);  //if next row exists the process is continued
            
            //setting the input from fields to the jtable
            String [] data = {bookId, bookName, author, genre, type, price};
            if(nextRow >= rowCount){
                DefaultTableModel model = (DefaultTableModel)bookTable.getModel();
                model.addRow(data);
                JOptionPane.showMessageDialog(rootPane, "Book added successfully");
            }else{
                if(emptyFlag == true){
                    int colCount = bookTable.getColumnCount();
                    for(int i=0; i<colCount ;i++){
                        bookTable.setValueAt(data[i], nextRow, i);
                    }
                }
            }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void searchBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBookBtnActionPerformed
        // searches book based on price
        //creating an arraylist to store data from table
        ArrayList <String> list = new ArrayList();

        int rowCount = bookTable.getRowCount();
        int colCount = bookTable.getColumnCount();

        //using loop to store data in arraylist
        for(int i = 0; i < rowCount; i++ ){
            for(int k = 0; k < colCount; k++){
                list.add((String)bookTable.getValueAt(i, k));
            }
        }
        
        //sorting the data in ascending order based on price within the arraylist
        for(int i = 5; i < list.size() - 1; i = i + 6){
            int min = i;
            for(int j = i + 6; j < list.size(); j = j + 6){
                if(Integer.parseInt((String) list.get(j))< Integer.parseInt((String) list.get(min))){
                    min = j;
                }
            }
            //storing the data in temporary variable
            String tempBookId = (String) list.get(i-5);
            String tempBookName = (String) list.get(i-4) ;
            String tempAuthor = (String) list.get(i-3);
            String tempGenre = (String) list.get(i-2);
            String tempType = (String) list.get(i-1);
            String tempPrice = (String) list.get(i);
            
            //setting the data with lowest price in the index
            list.set(i, list.get(min));
            list.set(i-1, list.get(min-1));
            list.set(i-2, list.get(min-2));
            list.set(i-3, list.get(min-3));
            list.set(i-4, list.get(min-4));
            list.set(i-5, list.get(min-5));
            
            //setting the data from the temporary variable in index
            list.set(min, tempPrice);
            list.set(min-1, tempType);
            list.set(min-2, tempGenre);
            list.set(min-3, tempAuthor);
            list.set(min-4, tempBookName);
            list.set(min-5, tempBookId);
        }
        //initializing variables
        int low = 5;
        int high = list.size()-1;
        int val = Integer.parseInt(bookByPriceFld.getText());
        
        //calling binary search method
        int output = binarySearch(list,low, high, val);

        //displaying output based on the returned mid value
        if(output == -1){
            JOptionPane.showMessageDialog(rootPane, "Book not found", "Invalid Input" , JOptionPane.ERROR_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Book for the searched price: " + "\n" + "Book Id: " + list.get(output-5) + "\n" + "Book Name: " + list.get(output - 4) + "\n"+ "Author: " + list.get(output -3) + "\n" + "Genre: " + list .get(output - 2) + "\n" + "Cover Type: " + list.get(output - 1) + "\n" + "Price: " + list.get(output));
        }
    }//GEN-LAST:event_searchBookBtnActionPerformed
    
    //implementing binary search algorithym
    public int binarySearch(ArrayList list, int low, int high, int val){
        if((low/6 + high/6)%2 == 0){
            if(low > high){
                return -1;
            }
            int mid = (low + high) /2; // calculating for mid value
            
            if(val < Integer.parseInt((String)list.get(mid))){
                return binarySearch(list, low, mid-6, val);
            }
            else if(val > Integer.parseInt((String)list.get(mid))){
                return binarySearch(list, mid+6, high, val);
            }else{
                return mid;
            }
        }else{
            if(low > high){
                return -1;
            }
            
            int mid = (low + high -6)/2; //calculating for mid value
            
            if(val < Integer.parseInt((String)list.get(mid))){
                return binarySearch(list, low, mid-6, val);
            }
            else if(val > Integer.parseInt((String)list.get(mid))){
                return binarySearch(list, mid+6, high, val);
            }else{
                return mid;
            }
        }
    }
    
    private void booksInGenreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_booksInGenreBtnActionPerformed
        // Tsearching book based on genre
        //use of linear search algorithm
        //checking for valid user selection
        if(bookByGenreComboBox.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(rootPane, "Please select a genre", "Invalid input" , JOptionPane.ERROR_MESSAGE);
        }else{
            String genreSearch = (String) bookByGenreComboBox.getSelectedItem();
            ArrayList <String> list = new ArrayList(); //creating an arraylist to store all the data from table

            int rowCount = bookTable.getRowCount();
            int colCount = bookTable.getColumnCount();

            for(int i = 0; i < rowCount; i++ ){
                for(int k = 0; k < colCount; k++){
                    list.add((String) bookTable.getValueAt(i, k));
                }
            }

            ArrayList <String> books = new ArrayList(); //creating an arraylist to store the searched book names
            int count = 0;
            
            //searching through the arraylist list to find data
            for(int j = 0; j < list.size()-1; j++){
                if(list.get(j).equals(genreSearch)){
                    String searchedbook = list.get(j-2);
                    books.add(searchedbook);
                    count = count + 1;
                }
            }
            //displaying output based on search
            if(count >=1){
                JOptionPane.showMessageDialog(rootPane,"There is/are " + count + " books available in "+ genreSearch +" genre:" + "\n" + (books.toString().replace("[","").replace("]","")));
            }else{
                JOptionPane.showMessageDialog(rootPane,"No books available in "+ genreSearch +" genre" , "" , JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_booksInGenreBtnActionPerformed
    
    private void bookByPriceFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookByPriceFldKeyPressed
        //checks whether the key being pressed is number or not. If anything except number is pressed text field is set not to be edited. It also accepts decimal but only once.
        char character = evt.getKeyChar();
        int keycode = evt.getKeyCode();
        if(!(Character.isDigit(character))){
            if(keycode== 46 || keycode == 110){ //checking for decimal
                if(bookByPriceFld.getText().contains(".")){
                    bookByPriceFld.setEditable(false);
                    JOptionPane.showMessageDialog(rootPane, "Decimal already exists" ,"Invalid Input", JOptionPane.ERROR_MESSAGE );
                }
                else{
                    bookByPriceFld.setEditable(true);
                }
            }else if(keycode == 8){ // checking for backspace
                bookByPriceFld.setEditable(true);
            }
            else{
                bookByPriceFld.setEditable(false);
                JOptionPane.showMessageDialog(rootPane, "Input other than number detected. Please enter a number" ,"Invalid Input", JOptionPane.ERROR_MESSAGE );
            }
        }
    }//GEN-LAST:event_bookByPriceFldKeyPressed

    private void bookByPriceFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookByPriceFldKeyReleased
        // TODO add your handling code here:
        bookByPriceFld.setEditable(true);
    }//GEN-LAST:event_bookByPriceFldKeyReleased

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // this method, on user selection sets the data of the selected row in the respective fields and allows them to be edited and then updated
        int nextRow = 0;
        int i = bookTable.getSelectedRow();
        boolean isDuplicate = true;

        String bookId = bookIdFld.getText();
        String bookName = bookNameFld.getText();

        int rowCount = bookTable.getRowCount();
        
        //checking whether a row has been selected or not
        if(bookIdFld.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Please select a row");
        }else{
            do{
                String checkId = (String) bookTable.getValueAt(nextRow, 0);
                String checkName = (String) bookTable.getValueAt(nextRow, 1);
                
                //checking if the update book Id or book name is duplicate
                if(checkId.equals(bookId) && checkName.equals(bookName)){
                    isDuplicate = true;
                    break;
                }

            }while(nextRow < rowCount && !isDuplicate);
            
            //updating the data in the table
            if(isDuplicate == true){
                bookTable.setValueAt(bookIdFld.getText(), i, 0);
                bookTable.setValueAt(bookNameFld.getText(), i, 1);
                bookTable.setValueAt(authorFld.getText(), i, 2);
                bookTable.setValueAt(genreComboBox.getSelectedItem(), i, 3);
                bookTable.setValueAt(typeGrp.getSelection().getActionCommand(), i, 4);
                bookTable.setValueAt(priceFld.getText(), i, 5);
                JOptionPane.showMessageDialog(rootPane, "Selcted row updated successfully", "" , JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }//GEN-LAST:event_updateBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // clearing the data from all the fields
        bookIdFld.setText("");
        bookNameFld.setText("");
        authorFld.setText("");
        priceFld.setText("");
        genreComboBox.setSelectedIndex(0);
        typeGrp.clearSelection();
        JOptionPane.showMessageDialog(rootPane, "Text Fields Cleared");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        //checks whether a row has been selected or not, if a row is selected the data of the row is deleted
        if(bookTable.getSelectedRow() != -1){
            DefaultTableModel model = (DefaultTableModel)bookTable.getModel();
            model.removeRow(bookTable.getSelectedRow());
            JOptionPane.showMessageDialog(rootPane, "Selected row deleted successfully");
            
            //clearing text fields after deleting the data
            bookIdFld.setText("");
            bookNameFld.setText("");
            authorFld.setText("");
            priceFld.setText("");
            genreComboBox.setSelectedIndex(0);
            typeGrp.clearSelection();
        }else{
            JOptionPane.showMessageDialog(rootPane, "Please select a row");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void softCvrRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softCvrRdBtnActionPerformed
        // setting action command for Soft Cover radio button
        softCvrRdBtn.setActionCommand("Soft Cover");
    }//GEN-LAST:event_softCvrRdBtnActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        //opening a CSV file and importing it's data in the already existing table
        //defining file path
        File csv_file = new File("src\\file\\books.csv");
        DefaultTableModel model = (DefaultTableModel)bookTable.getModel();  
        
        //creating arraylist to validate book Id and book Name while importing file
        ArrayList <Integer> idList = new ArrayList();
        ArrayList <String> bookList = new ArrayList();

        int rowCount = bookTable.getRowCount();
        int colCount = bookTable.getColumnCount();
        
        //storing data in respective arraylists
        for(int i = 0; i < rowCount; i++ ){
            for(int k = 0; k < colCount; k = k + 6){
                String bookId = (String) (bookTable.getValueAt(i, k));
                idList.add(Integer.parseInt(bookId));
            }
        }
        for(int i = 0; i < rowCount; i++ ){
            for(int k = 1; k < colCount; k = k + 6){
                String bookName = (String) bookTable.getValueAt(i, k);
                bookList.add(bookName);
            }
        }
        
        //reading and importing of file
        try{
            //reading file
            InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream(csv_file));
            CSVParser csvParser = CSVFormat.DEFAULT.parse(inputStreamReader);
            int start = 0;
            
            //reading file line wise
            for(CSVRecord csvRecord:csvParser){
                if(start == 0){
                    start = 1;
                }else{
                    //initializing vector and adding data from csv file line wise
                    Vector row =  new Vector(); 
                    String id = (String) csvRecord.get(0);
                    Integer checkBookId = Integer.parseInt(id);
                    String checkBookName = (String) csvRecord.get(1);              
                    
                    row.add(csvRecord.get(0));
                    row.add(csvRecord.get(1));
                    row.add(csvRecord.get(2));
                    row.add(csvRecord.get(3));
                    row.add(csvRecord.get(4));
                    row.add(csvRecord.get(5));
                    
                    //checks if the book Id and book Name in the current line of the CSV file exists in the table or not
                    if(idList.contains(checkBookId) || bookList.contains(checkBookName)){
                        JOptionPane.showMessageDialog(rootPane, "Data having duplicate book Id or book name is not added" + "\n" + "(Message repeated for every invalid input)" + "\n" +"Keep on pressing enter to continue", "Invalid Message" , JOptionPane.ERROR_MESSAGE );  
                    }else{
                        model.addRow(row);
                    }
                }
            }
            JOptionPane.showMessageDialog(rootPane, "Books added sucessfully from csv file", "" , JOptionPane.INFORMATION_MESSAGE );
        }
        
        
        catch(Exception e){
            System.out.println("Error");
        }
    }//GEN-LAST:event_openMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField authorFld;
    private javax.swing.JLabel authorLbl;
    private javax.swing.JComboBox<String> bookByGenreComboBox;
    private javax.swing.JLabel bookByGenreLbl;
    private javax.swing.JTextField bookByPriceFld;
    private javax.swing.JLabel bookByPriceLbl;
    private javax.swing.JTextField bookIdFld;
    private javax.swing.JLabel bookIdLbl;
    private javax.swing.JTextField bookNameFld;
    private javax.swing.JLabel bookNameLbl;
    private javax.swing.JTable bookTable;
    private javax.swing.JButton booksInGenreBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JLabel coverTypeLbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox<String> genreComboBox;
    private javax.swing.JLabel genreLbl;
    private javax.swing.JRadioButton hardCvrRdBtn;
    private javax.swing.JLabel headingLbl1;
    private javax.swing.JPanel headingPnl1;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPnl;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JTextField priceFld;
    private javax.swing.JLabel priceLbl;
    private javax.swing.JButton searchBookBtn;
    private javax.swing.JLabel searchBooksByLbl;
    private javax.swing.JRadioButton softCvrRdBtn;
    private javax.swing.ButtonGroup typeGrp;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
